{
  admin 0.0.0.0:2019

  log accessfile {
    output file /var/log/caddy/access.log {
      roll_size 10MB
      roll_keep 10
    }
    format json
    level INFO
    include http.log.access
  }

  log allstdout {
    output stdout
    format json
    level INFO
  }

  crowdsec {
		api_url http://crowdsec:8080
		api_key {env.CROWDSEC_API_KEY}
		ticker_interval 3s
	}

  metrics {
    per_host
  }

  http_port 80
  # Disable HTTPS on the public ingress since Cloudflare handles it
  https_port 0

  servers :80 {
    name public_gateway
    trusted_proxies static private_ranges
    client_ip_headers Cf-Connecting-Ip
  }

  # No need for auto HTTPS since Cloudflare handles this
  auto_https off
}

# Custom error handling snippet
(error_handler) {
  @404 expression {http.error.status_code} == 404
  @rate_limited expression {http.error.status_code} == 429
  @server_error expression {http.error.status_code} >= 500
  
  handle @404 {
    rewrite * /404
    root * /srv
    file_server
  }

  handle @rate_limited {
    respond "Rate limit exceeded. Please try again later." 429
  }

  handle @server_error {
    respond "Server error occurred. I have been notified." {http.error.status_code}
  }

  handle {
    respond "Error {http.error.status_code}: {http.error.status_text}" {http.error.status_code}
  }
}

# Main domain
{$DOMAIN}:80 {
  log

  rate_limit {
    zone main_site {
      key {client_ip}
      events 60
      window 5s
    }
    log_key
  }

  handle {
    root * /srv
    file_server
    
    # Security headers
    header {
      # Prevent clickjacking
      X-Frame-Options "SAMEORIGIN"
      # Help prevent XSS attacks
      X-Content-Type-Options "nosniff"
      # Prevent MIME type sniffing
      X-XSS-Protection "1; mode=block"
      # Enable strict HTTPS
      Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
      # Control allowed sources for content
      Content-Security-Policy "default-src 'self'; style-src 'self' 'unsafe-inline'; script-src 'self'; img-src 'self' data:; font-src 'self'; connect-src 'self'"
      # Control referrer information
      Referrer-Policy "strict-origin-when-cross-origin"
      # Disable FLoC tracking (Federated Learning of Cohorts, not really a thing anymore)
      Permissions-Policy "interest-cohort=()"
    }
  }

  handle_errors {
    import error_handler
  }
}

### www redirection
www.{$DOMAIN}:80 {
  log

  rate_limit {
    zone www_site {
      key {client_ip}
      events 30
      window 5s
    }
    log_key
  }

  redir https://{$DOMAIN}{uri} permanent
}

# Subdomains
*.{$DOMAIN}:80 {
  log

  # Rate limiting for subdomains - stricter than main site
  rate_limit {
    zone subdomains {
      key {client_ip}
      events 15
      window 5s
    }
    log_key
  }

  # Common security headers for all subdomains
  header {
    # Prevent clickjacking
    X-Frame-Options "SAMEORIGIN"
    # Help prevent XSS attacks
    X-Content-Type-Options "nosniff"
    # Prevent MIME type sniffing
    X-XSS-Protection "1; mode=block"
    # Enable strict HTTPS
    Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    # Control referrer information
    Referrer-Policy "strict-origin-when-cross-origin"
    # Disable FLoC tracking
    Permissions-Policy "interest-cohort=()"
  }

  handle {
    respond "Not Found" 404
  }

  handle_errors {
    import error_handler
  }
}